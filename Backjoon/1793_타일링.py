# 다이나믹 프로그래밍


# 문제: https://www.acmicpc.net/problem/1793

# 전형적인 DP 문제. 연습용으로 다시 풀어볼만한 문제다.
# 메모리: 32412KB / 시간: 32ms
from sys import stdin


def main():
    """
    세로막대는 길이 1, 가로/정사각형은 길이 2.
    N일때의 경우의 수 구하는 로직 (오른쪽으로만 붙인다고 가정)
    - 세로막대는 길이가 1이므로, N-1일때의 값 그대로.
    - 가로/정사각형은 2이므로, N-2일때의 값과 같음.
    세로막대는 1씩 증가, 가로/정사각형은 2씩 증가하는 셈이기 때문.

    질문게시판에 좋은 설명글이 있었다!
    링크👉 https://www.acmicpc.net/board/view/153940

    |■ , ■| 를 구분하지 않아도 되는 이유?
    -> 첫번째는 가로/정사각형을 추가한 모양새이므로 N-2값을 가져와 계산.
    -> 두번째는 세로막대를 추가한 모양. N-1값을 가져와 계산.
    이 둘을 합쳐 구하는게 현재 N의 경우의 수.
    따라서 자연스럽게 모든 경우의 수를 다 확일할 수 있게 됨!
    """
    data = list(map(int, stdin.read().splitlines()))
    MAX = max(data)

    dp = [0] * (MAX+1)
    # 🚨N = 0 일때의 경우의 수는 1로 취급해야 함. 아무것도 안 놓는 경우라고 한다... 왜 굳이 이렇게?
    dp[0] = dp[1] = 1
    dp[2] = 3

    for i in range(3, MAX+1):
        dp[i] = dp[i-1] + dp[i-2] * 2

    for d in data:
        print(dp[d])


main()