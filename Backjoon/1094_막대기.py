# 비트마스킹


# 문제: https://www.acmicpc.net/problem/1094

# 2진수를 떠올리면 쉬운 문제다.
# 메모리: 32412KB / 시간: 32ms
from sys import stdin


input = stdin.readline

def main():
    """
    처음 가지고있는 막대기의 길이는 64
    막대를 반으로 계속 자르면 2^x 길이의 막대들을 얻게 됨
    => 1000000 -> 100000, 100000 (64 -> 32, 32. 오른쪽으로 한칸 시프트)
    결국 X를 2^x의 합으로 표현하는 셈.
    따라서 X를 2진수로 표현했을때의 1의 갯수 = 필요한 막대 갯수가 된다.
    
    ex) X = 23일경우,
    - 23(10) = 10111(2) = 16 + 4 + 2 + 1
    - 처음 64cm 막대에서,
        - 반으로 잘라 32cm 두개를 얻고, 하나는 버림.
        - 32cm를 반으로 잘라 16cm 두개를 얻고, 그대로 보관. 이 중 하나는 다시 자름.
        - 16cm를 반으로 잘라 8cm 두개를 얻고, 하나는 버림.
        - 8cm를 반으로 잘라 4cm 두개를 얻고, 그대로 보관. 이 중 하나는 다시 자름.
        - 4cm를 반으로 잘라 2cm 두개를 얻고, 그대로 보관. 이 중 하나는 다시 자름.
        - 2cm를 반으로 잘라 1cm 두개를 얻고, 하나는 버림.
        => 최종적으로 남아있는 막대는 16, 4, 2, 1이 된다.
    """

    X = int(input())
    ret = bin(X).count("1")
    print(ret)


main()